m# =================== mp3info (http://ibiblio.org/mp3info/) ====================

-a artist
-c comment
-g genre
-l album
-n track
-t title
-y year
-G
Display a list of valid genres and their associated numeric codes. These are the only values accepted by the -g switch.
-h help page
-x Display technical attributes of the MP3 file
-r a|m|v
Report bit rate of Variable Bit Rate (VBR) files as one of the following (See the section below entitled Bit Rates for more information):
a - Average bit rate [float](Note: this option also causes the bit rates of
non-VBR files to be displayed as floating point values).
m - Median bit rate [integer]
v - Simply use the word 'Variable' [string] (this is the default).
-i Edit ID3 tag interactively (uses curses/ncurses functions)
-d Delete ID3 tag (if one exists)
-f Force Mode: Treat all files as MP3s even if MP3 frames can't be found
-F Do a Full scan for technical information (see the section Speed Considerations below for more information)

-p "FORMAT_STRING"

Print MP3 attributes according to FORMAT_STRING. FORMAT_STRING is similar to a printf(3) format string in that it is printed verbatim except for the following conversions and escape sequences. Any conversion specifier may optionally include the various alignment, precision, and field width modifiers accepted by printf(3). See the EXAMPLES section below for examples of how format strings are used in mp3info.
Conversion Specifiers
%f
Filename without the path [string]
%F
Filename with the path [string]
%k
File size in KB [integer]
%a
Artist [string]
%c
Comment [string]
%g
Musical genre [string]
%G
Musical genre number [integer]
%l
Album name [string]
%n
Track [integer]
%t
Track Title [string]
%y
Year [string]
%C
Copyright flag [string]
%e
Emphasis [string]
%E
CRC Error protection [string]
%L
MPEG Layer [string]
%O
Original material flag [string]
%o
Stereo/mono mode [string]
%p
Padding [string]
%v
MPEG Version [float]
%u
Number of good audio frames [integer]
%b
Number of corrupt audio frames [integer]
%Q
Sampling frequency in Hz [integer]
%q
Sampling frequency in KHz [integer]
%r
Bit Rate in KB/s (type and meaning affected by -r option)
%m
Playing time: minutes only [integer]
%s
Playing time: seconds only [integer] (usually used in conjunction with %m)
%S
Total playing time in seconds [integer]
%%
A single percent sign
Escape Sequences
\n
Newline
\t
Horizontal tab
\v
Vertical tab
\b
Backspace
\r
Carriage Return
\f
Form Feed
\a
Audible Alert (terminal bell)
\xhh
Any arbitrary character specified by the hexidecimal number hh
\ooo
Any arbitrary character specified by the octal number ooo
\\
A single backslash character

# ======================== EXAMPLES ============================================

Display existing ID3 tag information (if any) in song.mp3

mp3info song.mp3
Set the title, author and genre of song.mp3. (All other fields unchanged)

mp3info -t "Song Title" -a Author -g "Rock & Roll" song.mp3
Set the album field of all MP3 files in the current directory to "The White Album"

mp3info -l "The White Album" *.mp3
Delete the entire ID3 tag from song1.mp3 and song2.mp3

mp3info -d song1.mp3 song2.mp3
Delete the comment field from the ID3 tags of all MP3 files in the current directory. (All other fields unchanged)

mp3info -c "" *.mp3
Display the Title, Artist, Album, and Year of all MP3 files in the current directory. We include the labels 'File', etc. and insert newlines (\n) to make things more readable for humans:

mp3info -p "File: %f\nTitle: %t\nArtist: %a\nAlbum: %l\nYear: %y\n\n" *.mp3
Say you want to build a spreadsheet of your MP3 files. Here's a command you might use to help you accomplish that. Most spreadsheet programs will import an ASCII file and treat a given character as a field separator. A commonly used field separator is the tab character. For each MP3 file in the current directory, we want to output the filename, title, artist, and album on a single line and have the fields separated by a tab (\t) character. Note that you must include a newline (\n) at the end of the format string in order to get each file's information on a separate line. Here's the command:

mp3info -p "%f\t%t\t%a\t%l\t%y\n" *.mp3
Some spreadsheets or other software may allow importing data from flat files where each field is a specific width. Here's where the format modifers come into play. This next command outputs the same information as the command above, but uses fixed-width fields instead of tab separators. The filename field is defined as 50 characters wide, the title field is defined as 31 characters wide, and so on.

mp3info -p "%50f%31t%31a%31l%4y\n" *.mp3
The problem with the output of this command is that all strings are normally right- justified within their fields. This looks a little odd since most western languages read from left to right. In order to make the fields left-justified, add a minus sign (-) in front of the field-width:

mp3info -p "%-50f%-31t%-31a%-31l%-4y\n" *.mp3
Now suppose you just want the running time of each MP3 file specified in minutes and seconds. Simple enough:

mp3info -p "%f: %m:%s\n" *.mp3
You may notice when you do this, however, that leading zeros are not displayed in the seconds field (%s). So for instance, if you had a track four minutes and two seconds long its running time would be displayed as '4:2' instead of '4:02'. In order to tell mp3info to pad an integer field with zeros, you need to use a field width modifier and place a zero in front of it. The following command is the same as the previous one, but it specifies that mp3info is to display the seconds field with a fixed field-width of two characters and to pad the field with leading zeros if necessary:

mp3info -p "%f: %m:%02s\n" *.mp3
The last trick we have to show you is the precision specifier for floating point variables. The following command displays the filename and average bit rate for all MP3 files in the current directory.

mp3info -r a -p "%f %r\n" *.mp3
By default, the floating point value of the average bit rate is displayed with six digits past the decimal point (ex: 175.654332). If you are like me, this seems like a bit of overkill. At most you want one or two digits beyond the decimal place displayed. Or you might not want any. The following command displays the average bit rate with first two, then zero digits beyond the decimal point:

mp3info -r a -p "%f %.2r %.0r\n" *.mp3
If you wanted to specify a field width for a floating point value, you could do that by placing the field-width before the decimal point in the field modifier. This command does just that -- specifying an average bit-rate field six characters wide that will show two digits of precision beyond the decimal point:

mp3info -r a -p "%f %6.2r\n" *.mp3
# ======================== Date: 2017-02-26 12:00 ==============================


